#!/bin/bash

log() {
  echo -e "\033[32m[INFO]\033[0m $1"
}

# 定义红色错误日志输出函数
error() {
  echo -e "\033[31m[ERROR]\033[0m $1"
}

# 检查当前用户是否有sudo权限
if ! sudo -v &>/dev/null; then
  error "Please run the script as a user with sudo privileges"
  exit 1
fi

# apt 管理器的镜像源替换
replace_mirror_apt() {
  read -rp "Use USTC mirror as default for APT? [y/N]: " answer
  case $answer in
  [yY])
    log "Replacing the default mirror with USTC mirror..."
    sudo sed -i 's/http:\/\/archive.ubuntu.com/http:\/\/mirrors.ustc.edu.cn/g' /etc/apt/sources.list
    sudo sed -i 's/security.ubuntu.com/mirrors.ustc.edu.cn/g' /etc/apt/sources.list
    sudo apt update
    log "Mirror replacement completed."
    ;;
  *)
    log "Keeping the default mirror."
    ;;
  esac
}

# 定义函数用于安装apt软件
install_packages_apt() {
  log "Installing common components..."
  sudo apt install -y zsh tldr vim tmux curl wget openssl exa \
    build-essential python3-pygments gdb python3 python3-pip zsh-antigen # 这里可以添加其他需要安装的软件包
  log "Package installation completed."
}

# 定义函数用于在macos下使用homebrew进行软件安装
install_packages_homebrew() {
  log "Installing common components..."
  brew install zsh tldr vim tmux curl wget openssl exa \
    pygments antigen # 这里可以添加其他需要安装的软件包
  log "Package installation completed."
}

# 定义函数用于配置git全局用户名和邮箱
config_git() {
  # 检查是否已经存在现有的gitconfig配置，如果有的话则输出warning信息
  if [ -f ~/.gitconfig ]; then
    log "Warning: Existing gitconfig file found. Skipping git global configuration."
    return
  fi 
  read -rp "Do you want to configure git global username and email? [y/N]: " answer
  case $answer in
  [yY])
    read -rp "Enter your git username: " username
    read -rp "Enter your git email: " email
    git config --global user.name "$username"
    git config --global user.email "$email"
    log "Git global configuration completed."
    ;;
  *)
    log "Skipping git global configuration."
    ;;
  esac
}

# 定义函数用于解密加密文件
decrypt_files() {
  read -rp "Do you want to decrypt encrypted files using yadm? [y/N]: " answer
  case $answer in
  [yY])
    yadm decrypt # 这里可以添加其他需要解密的文件路径
    log "File decryption completed."
    ;;
  *)
    log "Skipping file decryption."
    ;;
  esac
}

# 主程序开始

# 检查包管理器是否为apt
# if [ -f /etc/apt/sources.list ]; then
#   # 询问是否要替换镜像源
#   replace_mirror_apt
#   # 安装apt软件
#   install_packages_apt
# else
#   # 如果不是apt，则输出错误信息
#   error "Unsupported package manager, please install manually."
# fi

# 检查当前操作系统类型以及对应的包管理器，使用正确的包管理器进行软件安装
if [ "$(uname)" = "Darwin" ]; then
  # 检查是否已经安装homebrew
  if ! command -v brew &>/dev/null; then
    error "Homebrew is not installed. Please install it first."
    exit 1
  fi
  install_packages_homebrew
elif [ -f /etc/apt/sources.list ]; then
  # 询问是否要替换镜像源
  replace_mirror_apt
  # 安装apt软件
  install_packages_apt
else
  # 如果不是apt，则输出错误信息
  error "Unsupported package manager, please install manually."
fi

# 配置git全局用户名和邮箱
config_git

# 解密加密文件
decrypt_files

log "Bootstrap script completed."

# 更改默认shell为zsh
if [ "$SHELL" = "/bin/zsh" ]; then
  log "Zsh is already the default shell."
else
  log "Changing the shell to zsh."
  if chsh -s "$(which zsh)"; then
    # 输出绿色信息表示成功更改默认shell
    log "Default shell changed to zsh."
    # 重新启动shell以使更改生效
    exec -l $SHELL
  else
    # 输出红色信息表示更改默认shell失败
    error "Failed to change default shell. Please try again later."
  fi
fi
